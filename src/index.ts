import { app, BrowserWindow, ipcMain } from "electron";
import { database } from './lib/database'; // Assuming database.ts is in src/lib/
import { DataSet } from "./types/data-types";
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    fullscreen: true,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  // mainWindow.webContents.openDevTools();

  mainWindow.webContents.session.webRequest.onHeadersReceived(
    { urls: ['*://*/*'] },
    (details, callback) => {
      let csp = `
        default-src 'self' 'unsafe-inline' data:;
        script-src 'self' 'unsafe-inline' 'unsafe-eval';
        style-src 'self' 'unsafe-inline';
        img-src 'self' data:;
        media-src 'self';
        font-src 'self' data:;
        object-src 'none';
        frame-ancestors 'none';
        form-action 'self';
      `;

      const allowedApiHosts = [
        'http://localhost:3000',
        'ws://localhost:3000',
      ];
      csp += ` connect-src 'self' ${allowedApiHosts.join(' ')};`;

      callback({
        responseHeaders: {
          ...details.responseHeaders,
          'Content-Security-Policy': [csp.replace(/\s+/g, ' ').trim()],
        },
      });
    }
  );
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', async () => {
  // Initialize the database and create tables if they don't exist
  await database.init();

  // --- IPC HANDLERS GO HERE ---

  // Handler for creating a new table from data
  ipcMain.handle('db:createTable', async (_, { tableName, columnData, data } : DataSet) => {
    try {
      await database.createTableFromData(tableName, columnData, data);
      return { success: true };
    } catch (error) {
      console.error(`Failed to create table '${tableName}':`, error);
      return { success: false, error: error.message };
    }
  });

  // Add any other ipcMain handlers here (e.g., for saving/loading state)
  // ipcMain.handle('db:save', ...);
  // ipcMain.handle('db:load', ...);

  // After setting up listeners, create the main window
  createWindow();
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
